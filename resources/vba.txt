#If Win64 Then
    Private Declare PtrSafe Sub sleepp Lib "kernel32.dll" Alias "Sleep" (ByVal dwMilliseconds As LongLong)
    Private Declare PtrSafe Function timeGetTime Lib "winmm.dll" () As LongPtr
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As LongLong, ByVal lpFileName As String) As LongLong
    Sub delay(T As LongPtr)
        Dim time1 As LongPtr
        time1 = timeGetTime
        Do
            DoEvents
        Loop While timeGetTime - time1 < T
    End Sub
    Private Function ReadFromIni(ByVal IniFile As String, ByVal Section As String, ByVal Key As String, ByVal DefaultValue As String) As String
        Dim strRtn As String
        strRtn = Space(256)
        Dim lngRtn As LongLong
        lngRtn = GetPrivateProfileString(Section, Key, DefaultValue, strRtn, 255, IniFile)
        If lngRtn > 0 Then
            strRtn = Trim(strRtn)
            ReadFromIni = Mid(strRtn, 1, Len(strRtn) - 1)
        Else
            ReadFromIni = DefaultValue
        End If
    End Function
#Else
    Private Declare Sub sleepp Lib "kernel32.dll" Alias "Sleep" (ByVal dwMilliseconds As Long)
    Private Declare Function timeGetTime Lib "winmm.dll" () As Long
    Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Sub delay(T As Long)
        Dim time1 As Long
        time1 = timeGetTime
        Do
            DoEvents
        Loop While timeGetTime - time1 < T
    End Sub
    Private Function ReadFromIni(ByVal IniFile As String, ByVal Section As String, ByVal Key As String, ByVal DefaultValue As String) As String
        Dim strRtn As String
        strRtn = Space(256)
        Dim lngRtn As Long
        lngRtn = GetPrivateProfileString(Section, Key, DefaultValue, strRtn, 255, IniFile)
        If lngRtn > 0 Then
            strRtn = Trim(strRtn)
            ReadFromIni = Mid(strRtn, 1, Len(strRtn) - 1)
        Else
            ReadFromIni = DefaultValue
        End If
    End Function
#End If



Private Sub Workbook_open()  '打开文件时开始执行
    '基础配置
    Dim delayTime, filePath As String, filePath2 As String, lineIndex, showStyle, width, height, RGBArray()
    'filePath = ThisWorkbook.Path & "\" & "resources\config.txt"
    filePath = ThisWorkbook.Path & "\" & "resources\config.ini"
    filePath2 = ThisWorkbook.Path & "\" & "resources\pictureRGB.txt"
    If Dir(filePath) = "" Or Dir(filePath2) = "" Then
        MsgBox ("rgb.txt文件不存在，请先执行ExcelPhoto.py")
        End
    End If

    '读取配置文件
    showStyle = ReadFromIni(filePath, "config", "style", 1)
    delayTime = ReadFromIni(filePath, "config", "delayTime", 30)
    width = ReadFromIni(filePath, "config", "width", 128)
    height = ReadFromIni(filePath, "config", "height", 128)

    '读取图片RGB数据文件
    lineIndex = 1
    ReDim RGBArray(1 To height, 1 To width)
    Open filePath2 For Input As #1
    Do While Not EOF(1)
        On Error Resume Next
        Line Input #1, nextline
        oneLineRGBs = Split(nextline, Chr(9))
        oneLineRGBCount = UBound(oneLineRGBs)
        For rowIndex = 0 To oneLineRGBCount
            oneRGB = Split(oneLineRGBs(rowIndex), ",")
            RGBArray(lineIndex, rowIndex + 1) = oneRGB
        Next
        lineIndex = lineIndex + 1
    Loop
    Close #1
    
    
    '逐步展示像素图
    If showStyle = 1 Then
        For rowIndex = 1 To width
            For lineIndex = 1 To height
                oneRGB = RGBArray(lineIndex, rowIndex)
                Cells(lineIndex, rowIndex).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            delay (delayTime)
        Next
    ElseIf showStyle = 2 Then
        For lineIndex = 1 To width
            For rowIndex = 1 To height
                oneRGB = RGBArray(lineIndex, rowIndex)
                Cells(lineIndex, rowIndex).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            delay (delayTime)
        Next
    ElseIf showStyle = 3 Then
        A1X = 1
        A1Y = 1
        A2X = width
        A2Y = 1
        B1X = width
        B1Y = 2
        B2X = width
        B2Y = height
        C1X = width - 1
        C1Y = height
        C2X = 1
        C2Y = height
        D1X = 1
        D1Y = height - 1
        D2X = 1
        D2Y = 2
        Do While A1X <= width / 2 + 1
            '上
            For X = A1X To A2X
                oneRGB = RGBArray(A1Y, X)
                Cells(A1Y, X).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            A1X = A1X + 1
            A1Y = A1Y + 1
            A2X = A2X - 1
            A2Y = A2Y + 1
            
            
            '右
            For Y = B1Y To B2Y
                oneRGB = RGBArray(Y, B1X)
                Cells(Y, B1X).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            B1X = B1X - 1
            B1Y = B1Y + 1
            B2X = B2X - 1
            B2Y = B2Y - 1
        
        
            '下
            For X = C1X To C2X Step -1
                oneRGB = RGBArray(C2Y, X)
                Cells(C2Y, X).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            C1X = C1X - 1
            C1Y = C1Y - 1
            C2X = C2X + 1
            C2Y = C2Y - 1
        
        
            '左
            For Y = D1Y To D2Y Step -1
                oneRGB = RGBArray(Y, D1X)
                Cells(Y, D1X).Interior.Color = RGB(oneRGB(0), oneRGB(1), oneRGB(2))
            Next
            D1X = D1X + 1
            D1Y = D1Y - 1
            D2X = D2X + 1
            D2Y = D2Y + 1
            delay (delayTime)
        Loop
    End If
End Sub

